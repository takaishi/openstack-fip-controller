// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/openstack/openstack.go

// Package mock_openstack is a generated GoMock package.
package mock_openstack

import (
	gomock "github.com/golang/mock/gomock"
	servers "github.com/gophercloud/gophercloud/openstack/compute/v2/servers"
	tenants "github.com/gophercloud/gophercloud/openstack/identity/v2/tenants"
	projects "github.com/gophercloud/gophercloud/openstack/identity/v3/projects"
	floatingips "github.com/gophercloud/gophercloud/openstack/networking/v2/extensions/layer3/floatingips"
	networks "github.com/gophercloud/gophercloud/openstack/networking/v2/networks"
	ports "github.com/gophercloud/gophercloud/openstack/networking/v2/ports"
	reflect "reflect"
)

// MockOpenStackClientInterface is a mock of OpenStackClientInterface interface
type MockOpenStackClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOpenStackClientInterfaceMockRecorder
}

// MockOpenStackClientInterfaceMockRecorder is the mock recorder for MockOpenStackClientInterface
type MockOpenStackClientInterfaceMockRecorder struct {
	mock *MockOpenStackClientInterface
}

// NewMockOpenStackClientInterface creates a new mock instance
func NewMockOpenStackClientInterface(ctrl *gomock.Controller) *MockOpenStackClientInterface {
	mock := &MockOpenStackClientInterface{ctrl: ctrl}
	mock.recorder = &MockOpenStackClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpenStackClientInterface) EXPECT() *MockOpenStackClientInterfaceMockRecorder {
	return m.recorder
}

// GetTenant mocks base method
func (m *MockOpenStackClientInterface) GetTenant(id string) (tenants.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenant", id)
	ret0, _ := ret[0].(tenants.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenant indicates an expected call of GetTenant
func (mr *MockOpenStackClientInterfaceMockRecorder) GetTenant(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenant", reflect.TypeOf((*MockOpenStackClientInterface)(nil).GetTenant), id)
}

// GetTenantByName mocks base method
func (m *MockOpenStackClientInterface) GetTenantByName(name string) (projects.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantByName", name)
	ret0, _ := ret[0].(projects.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantByName indicates an expected call of GetTenantByName
func (mr *MockOpenStackClientInterfaceMockRecorder) GetTenantByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantByName", reflect.TypeOf((*MockOpenStackClientInterface)(nil).GetTenantByName), name)
}

// GetServer mocks base method
func (m *MockOpenStackClientInterface) GetServer(id string) (*servers.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer", id)
	ret0, _ := ret[0].(*servers.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServer indicates an expected call of GetServer
func (mr *MockOpenStackClientInterfaceMockRecorder) GetServer(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockOpenStackClientInterface)(nil).GetServer), id)
}

// GetNetworkByName mocks base method
func (m *MockOpenStackClientInterface) GetNetworkByName(name string) (networks.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkByName", name)
	ret0, _ := ret[0].(networks.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkByName indicates an expected call of GetNetworkByName
func (mr *MockOpenStackClientInterfaceMockRecorder) GetNetworkByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkByName", reflect.TypeOf((*MockOpenStackClientInterface)(nil).GetNetworkByName), name)
}

// FindFIP mocks base method
func (m *MockOpenStackClientInterface) FindFIP(networkName, fixedIP string) (floatingips.FloatingIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFIP", networkName, fixedIP)
	ret0, _ := ret[0].(floatingips.FloatingIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFIP indicates an expected call of FindFIP
func (mr *MockOpenStackClientInterfaceMockRecorder) FindFIP(networkName, fixedIP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFIP", reflect.TypeOf((*MockOpenStackClientInterface)(nil).FindFIP), networkName, fixedIP)
}

// GetFIP mocks base method
func (m *MockOpenStackClientInterface) GetFIP(id string) (*floatingips.FloatingIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFIP", id)
	ret0, _ := ret[0].(*floatingips.FloatingIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFIP indicates an expected call of GetFIP
func (mr *MockOpenStackClientInterfaceMockRecorder) GetFIP(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFIP", reflect.TypeOf((*MockOpenStackClientInterface)(nil).GetFIP), id)
}

// CreateFIP mocks base method
func (m *MockOpenStackClientInterface) CreateFIP(networkName string) (*floatingips.FloatingIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFIP", networkName)
	ret0, _ := ret[0].(*floatingips.FloatingIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFIP indicates an expected call of CreateFIP
func (mr *MockOpenStackClientInterfaceMockRecorder) CreateFIP(networkName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFIP", reflect.TypeOf((*MockOpenStackClientInterface)(nil).CreateFIP), networkName)
}

// DeleteFIP mocks base method
func (m *MockOpenStackClientInterface) DeleteFIP(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFIP", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFIP indicates an expected call of DeleteFIP
func (mr *MockOpenStackClientInterfaceMockRecorder) DeleteFIP(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFIP", reflect.TypeOf((*MockOpenStackClientInterface)(nil).DeleteFIP), id)
}

// AttachFIP mocks base method
func (m *MockOpenStackClientInterface) AttachFIP(id, portID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachFIP", id, portID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachFIP indicates an expected call of AttachFIP
func (mr *MockOpenStackClientInterfaceMockRecorder) AttachFIP(id, portID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachFIP", reflect.TypeOf((*MockOpenStackClientInterface)(nil).AttachFIP), id, portID)
}

// DetachFIP mocks base method
func (m *MockOpenStackClientInterface) DetachFIP(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachFIP", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachFIP indicates an expected call of DetachFIP
func (mr *MockOpenStackClientInterfaceMockRecorder) DetachFIP(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachFIP", reflect.TypeOf((*MockOpenStackClientInterface)(nil).DetachFIP), id)
}

// FindPortByServer mocks base method
func (m *MockOpenStackClientInterface) FindPortByServer(server servers.Server) (*ports.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPortByServer", server)
	ret0, _ := ret[0].(*ports.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPortByServer indicates an expected call of FindPortByServer
func (mr *MockOpenStackClientInterfaceMockRecorder) FindPortByServer(server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPortByServer", reflect.TypeOf((*MockOpenStackClientInterface)(nil).FindPortByServer), server)
}
